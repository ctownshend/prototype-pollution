templateSettings
escape
evaluate
interpolate
variable
imports
_
after
ary
assign
assignIn
assignInWith
assignWith
at
before
bind
placeholder
bindAll
bindKey
placeholder
castArray
chain
chunk
compact
concat
cond
conforms
constant
countBy
create
curry
placeholder
curryRight
placeholder
debounce
defaults
defaultsDeep
defer
delay
difference
differenceBy
differenceWith
drop
dropRight
dropRightWhile
dropWhile
fill
filter
flatMap
flatMapDeep
flatMapDepth
flatten
flattenDeep
flattenDepth
flip
flow
flowRight
fromPairs
functions
functionsIn
groupBy
initial
intersection
intersectionBy
intersectionWith
invert
invertBy
invokeMap
iteratee
keyBy
keys
keysIn
map
mapKeys
mapValues
matches
matchesProperty
memoize
Cache
merge
mergeWith
method
methodOf
mixin
negate
nthArg
omit
omitBy
once
orderBy
over
overArgs
overEvery
overSome
partial
placeholder
partialRight
placeholder
partition
pick
pickBy
property
propertyOf
pull
pullAll
pullAllBy
pullAllWith
pullAt
range
rangeRight
rearg
reject
remove
rest
reverse
sampleSize
set
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/.set (function ({}, BAD_PATH, VALUE))
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/.set (function ({}, BAD_PATH, VALUE))
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/ (function ({}, BAD_PATH, VALUE))
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/ (function ({}, BAD_PATH, VALUE))
setWith
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/.setWith (function ({}, BAD_PATH, VALUE))
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/.setWith (function ({}, BAD_PATH, VALUE))
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/ (function ({}, BAD_PATH, VALUE))
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/ (function ({}, BAD_PATH, VALUE))
shuffle
slice
sortBy
sortedUniq
sortedUniqBy
split
spread
tail
take
takeRight
takeRightWhile
takeWhile
tap
throttle
thru
toArray
toPairs
toPairsIn
toPath
toPlainObject
transform
unary
union
unionBy
unionWith
uniq
uniqBy
uniqWith
unset
unzip
unzipWith
update
test
updateWith
test
values
test
valuesIn
test
without
test
words
test
wrap
test
xor
test
xorBy
test
xorWith
test
zip
test
zipObject
test
zipObjectDeep
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/.zipObjectDeep (function ([BAD_STRING], [VALUE]))
Detected : /Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.15/node_modules/lodash/ (function ([BAD_STRING], [VALUE]))
zipWith
entries
entriesIn
extend
extendWith
add
attempt
camelCase
capitalize
ceil
clamp
clone
cloneDeep
cloneDeepWith
cloneWith
conformsTo
deburr
defaultTo
divide
endsWith
eq
escape
escapeRegExp
every
find
findIndex
findKey
findLast
findLastIndex
findLastKey
floor
forEach
forEachRight
forIn
forInRight
forOwn
forOwnRight
get
gt
gte
has
hasIn
head
identity
includes
indexOf
inRange
invoke
isArguments
isArray
isArrayBuffer
isArrayLike
isArrayLikeObject
isBoolean
isBuffer
isDate
isElement
isEmpty
isEqual
isEqualWith
isError
isFinite
isFunction
isInteger
isLength
isMap
isMatch
isMatchWith
isNaN
isNative
isNil
isNull
isNumber
isObject
isObjectLike
isPlainObject
isRegExp
isSafeInteger
isSet
isString
isSymbol
isTypedArray
isUndefined
isWeakMap
isWeakSet
join
kebabCase
last
lastIndexOf
lowerCase
lowerFirst
lt
lte
max
maxBy
mean
meanBy
min
minBy
stubArray
stubFalse
stubObject
stubString
stubTrue
multiply
nth
noConflict
noop
now
pad
padEnd
padStart
parseInt
random
reduce
reduceRight
repeat
replace
result
round
runInContext
sample
size
snakeCase
some
sortedIndex
sortedIndexBy
sortedIndexOf
sortedLastIndex
sortedLastIndexBy
sortedLastIndexOf
startCase
startsWith
subtract
sum
sumBy
template
times
toFinite
toInteger
toLength
toLower
toNumber
toSafeInteger
toString
toUpper
trim
trimEnd
trimStart
truncate
unescape
uniqueId
upperCase
upperFirst
each
eachRight
first
VERSION
_


function parseElement() {
  let polluted = [
    {
      name:
        "/Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.14/node_modules/lodash.set",
      sig: "function ({__proto__.test}, BAD_PATH, VALUE)",
      functionName: "set",
    },
    {
      name:
        "/Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.14/node_modules/lodash.set",
      sig: "function ({__proto__[test]}, BAD_PATH, VALUE)",
      functionName: "set",
    },
    {
      name: undefined,
      sig: "function ({__proto__.test}, BAD_PATH, VALUE)",
      functionName: "set",
    },
    {
      name: undefined,
      sig: "function ({__proto__[test]}, BAD_PATH, VALUE)",
      functionName: "set",
    },
    {
      name:
        "/Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.14/node_modules/lodash.setWith",
      sig: "function ({__proto__.test}, BAD_PATH, VALUE)",
      functionName: "setWith",
    },
    {
      name:
        "/Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.14/node_modules/lodash.setWith",
      sig: "function ({__proto__[test]}, BAD_PATH, VALUE)",
      functionName: "setWith",
    },
    {
      name: undefined,
      sig: "function ({__proto__.test}, BAD_PATH, VALUE)",
      functionName: "setWith",
    },
    {
      name: undefined,
      sig: "function ({__proto__[test]}, BAD_PATH, VALUE)",
      functionName: "setWith",
    },
    {
      name:
        "/Users/camerontownshend/Documents/Cameron/dev/learnVulnerabilities/prototype-pollution/npm_libraries/lodash/v4.17.14/node_modules/lodash.zipObjectDeep",
      sig: "function ([BAD_STRING], [VALUE])",
      functionName: "zipObjectDeep",
    },
    {
      name: undefined,
      sig: "function ([BAD_STRING], [VALUE])",
      functionName: "zipObjectDeep",
    },
  ];
  let functions = [
    { functionName: "templateSettings" },
    { functionName: "setWith" },
    { functionName: "evaluate" },
    { functionName: "zipObjectDeep" },
    { functionName: "variable" },
    { functionName: "imports" },
    { functionName: "_" },
    { functionName: "after" },
    { functionName: "ary" },
    { functionName: "assign" },
    { functionName: "assignIn" },
    { functionName: "assignInWith" },
    { functionName: "assignWith" },
    { functionName: "at" },
    { functionName: "before" },
    { functionName: "bind" },
    { functionName: "placeholder" },
    { functionName: "bindAll" },
    { functionName: "bindKey" },
    { functionName: "placeholder" },
    { functionName: "castArray" },
    { functionName: "chain" },
    { functionName: "chunk" },
    { functionName: "compact" },
    { functionName: "concat" },
    { functionName: "cond" },
    { functionName: "conforms" },
    { functionName: "constant" },
    { functionName: "countBy" },
    { functionName: "create" },
    { functionName: "curry" },
    { functionName: "placeholder" },
    { functionName: "curryRight" },
    { functionName: "placeholder" },
    { functionName: "debounce" },
    { functionName: "defaults" },
    { functionName: "defaultsDeep" },
    { functionName: "defer" },
    { functionName: "delay" },
    { functionName: "difference" },
    { functionName: "differenceBy" },
    { functionName: "differenceWith" },
    { functionName: "drop" },
    { functionName: "dropRight" },
    { functionName: "dropRightWhile" },
    { functionName: "dropWhile" },
    { functionName: "fill" },
    { functionName: "filter" },
    { functionName: "flatMap" },
    { functionName: "flatMapDeep" },
    { functionName: "flatMapDepth" },
    { functionName: "flatten" },
    { functionName: "flattenDeep" },
    { functionName: "flattenDepth" },
    { functionName: "flip" },
    { functionName: "flow" },
    { functionName: "flowRight" },
    { functionName: "fromPairs" },
    { functionName: "functions" },
    { functionName: "functionsIn" },
    { functionName: "groupBy" },
    { functionName: "initial" },
    { functionName: "intersection" },
    { functionName: "intersectionBy" },
    { functionName: "intersectionWith" },
    { functionName: "invert" },
    { functionName: "invertBy" },
    { functionName: "invokeMap" },
    { functionName: "iteratee" },
    { functionName: "keyBy" },
    { functionName: "keys" },
    { functionName: "keysIn" },
    { functionName: "map" },
    { functionName: "mapKeys" },
    { functionName: "mapValues" },
    { functionName: "matches" },
    { functionName: "matchesProperty" },
    { functionName: "memoize" },
    { functionName: "Cache" },
    { functionName: "merge" },
    { functionName: "mergeWith" },
    { functionName: "method" },
    { functionName: "methodOf" },
    { functionName: "mixin" },
    { functionName: "negate" },
    { functionName: "nthArg" },
    { functionName: "omit" },
    { functionName: "omitBy" },
    { functionName: "once" },
    { functionName: "orderBy" },
    { functionName: "over" },
    { functionName: "overArgs" },
    { functionName: "overEvery" },
    { functionName: "overSome" },
    { functionName: "partial" },
    { functionName: "placeholder" },
    { functionName: "partialRight" },
    { functionName: "placeholder" },
    { functionName: "partition" },
    { functionName: "pick" },
  ];
  for (const functionName of functions) {
    // console.log(functionName);
    for (const pollies of polluted.filter((item) => {
      return item.functionName === functionName.functionName;
    })) {
      console.log(pollies);
    }
  }
}